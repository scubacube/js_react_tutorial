// =============================
// Регулярные выражения.

// Регулярные выражения служат для того, чтобы удобно работать со строками, позволяют удалять, 
// менять части слов, ограничивать ввода определенных знаков и т.д. Состоят всегла из 2 частей: паттернов и флагов. 
// Также есть 2 варианта записи регулярных выражений:

// 1. Конструктор 
// new RegExp('pattern', 'flags');
// 2. /pattern/flags

// pattern - это то, что мы хотим найти - знаки, строки.
// flags - вспомогательные символы

// let answer = prompt('Введите ваше имя');

// let reg = /n/ig;

// console.log(answer.search(reg));
// console.log(answer.match(reg));
// i - флаг регистра. Говорит о том, что мы хотим найти что-то вне зависимости от регистра
// g - флаг глобальности. Мы ищем не только первое вхождение, но и все последующие 
// m - флаг многострочности.

// let pass = prompt('Введите пароль');
// console.log(pass.replace(/./g,'*')); //Можно писать либо переменную reg, либо два слэша 
// alert('12-34-56'.replace(/-/g, ':'));

// console.log(reg.test(answer)); //Если ввести Anna, то выведется true, потому что буква N будет найдена
//==========================================================/
//Классы символов

//1. \d - чтобы искать числа (digits). Если мы НЕ хотим искать число, то \D
//2. \w  - чтобы искать буквы (words). Если мы НЕ хотим искать число, то \W
//3. \s - чтобы искать пробелы (spaces). Если мы НЕ хотим искать пробел, то \S

// let answer = prompt('Введите число');
// let reg = /\d/g;
// console.log(answer.match(reg)); //Результат - массив чисел

//Более сложное регулярное выражение
let str = 'my name is r2d2'; 
// console.log(str.match(/\w\d\w\d/i)); //нужно найти r2d2, для этого можно задать такое рег.выражение
// console.log(str.match(/ /)); // А так мы можем проосто найти пробел (первый)
console.log(str.match(/\s/)); //Или так